#include <iostream>
#include <climits>
using namespace std;

// Function to compute the prefix sum matrix
void computePrefixSum(int matrix[][5], int rows, int cols, int prefix[][5]) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            // Compute the prefix sum
            prefix[i][j] = matrix[i][j];
            if (i > 0) prefix[i][j] += prefix[i - 1][j]; // Add top cell
            if (j > 0) prefix[i][j] += prefix[i][j - 1]; // Add left cell
            if (i > 0 && j > 0) prefix[i][j] -= prefix[i - 1][j - 1]; // Remove double counted area
        }
    }
}

// Function to compute the maximum sum submatrix using prefix sum
int maxSumSubmatrix(int matrix[][5], int rows, int cols) {
    int prefix[rows][5];
    computePrefixSum(matrix, rows, cols, prefix);

    int maxSum = INT_MIN;

    // Iterate over all possible row pairs
    for (int r1 = 0; r1 < rows; r1++) {
        for (int r2 = r1; r2 < rows; r2++) {
            
            // Iterate over all possible column pairs
            for (int c1 = 0; c1 < cols; c1++) {
                for (int c2 = c1; c2 < cols; c2++) {
                    
                    // Compute sum using the prefix sum formula
                    int subMatrixSum = prefix[r2][c2];

                    if (r1 > 0) subMatrixSum -= prefix[r1 - 1][c2];
                    if (c1 > 0) subMatrixSum -= prefix[r2][c1 - 1];
                    if (r1 > 0 && c1 > 0) subMatrixSum += prefix[r1 - 1][c1 - 1];

                    // Update max sum if necessary
                    maxSum = max(maxSum, subMatrixSum);
                }
            }
        }
    }

    return maxSum;
}

// Driver Code
int main() {
    int matrix[4][5] = {
        {1, 2, -1, -4, -20},
        {-8, -3, 4, 2, 1},
        {3, 8, 10, 1, 3},
        {-4, -1, 1, 7, -6}
    };

    cout << "Maximum Sum Submatrix: " << maxSumSubmatrix(matrix, 4, 5) << endl;
    return 0;
}
